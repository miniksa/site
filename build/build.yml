
trigger:
- main

pool: 
  vmImage: ubuntu-latest

variables:
  blog.artifact: 'drop'
  blog.path: './src'
  hugo.version: '0.91.2'
  azure.blobContainer: '\$web'
  azure.subscription: 'NiksaSiteAzureConnection'
  azure.keyVaultName: 'niksasitekeys'
  azure.resourceGroup: 'niksadevsite'
  azure.cdnEndpointName: 'niksadev'
  azure.cdnProfileName: 'niksadevsitecdn'

stages:
- stage: BuildStage
  displayName: 'Build Site'
  jobs:
  - job: BuildJob
    displayName: 'Build Site Job'
    steps:
    - checkout: self
      submodules: true
    - script: |
        wget -c https://github.com/gohugoio/hugo/releases/download/v$(hugo.version)/hugo_$(hugo.version)_Linux-64bit.deb
      displayName: "Download Hugo"
    - script: 'sudo dpkg -i hugo_$(hugo.version)_Linux-64bit.deb'
      displayName: "Install Hugo"
    - script: |
        cd $(blog.path)
        hugo --log -v
      displayName: 'Generate Blog'
    - task: CopyFiles@2
      displayName: 'Copy Generated Blog'
      inputs:
        SourceFolder: '$(blog.path)/public'
        Contents: "**"
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish to Artifact Store'
      inputs:
        PathToPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '$(blog.artifact)'
        publishLocation: 'Container'
- stage: ReleaseStage
  displayName: 'Release Site'
  jobs:
  - job: ReleaseJob
    displayName: 'Release Site Job'
    steps:
    - checkout: none
    - task: AzureKeyVault@2
      inputs:
        connectedServiceName: '$(azure.subscription)'
        keyVaultName: '$(azure.keyVaultName)'
    - task: DownloadPipelineArtifact@2
      displayName: 'Fetch from Artifact Store'
      inputs:
        source: current
        artifact: '$(blog.artifact)'
        path: $(Pipeline.Workspace)
    - task: AzureCLI@2
      displayName: 'Send artifact to blob storage'
      inputs:
        azureSubscription: '$(azure.subscription)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          az storage blob delete-batch -s "$(azure.blobContainer)" --connection-string "$(AZURE-STORAGE-CONNECTION-STRING)"
          az storage blob upload-batch -d "$(azure.blobContainer)" -s "$(Pipeline.Workspace)/$(blog.artifact)" --connection-string "$(AZURE-STORAGE-CONNECTION-STRING)"
    - task: AzureCLI@2
      displayName: 'Purge CDN content'
      inputs:
        azureSubscription: '$(azure.subscription)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          az cdn endpoint purge -n "$(azure.cdnEndpointName)" --profile-name "$(azure.cdnProfileName)" --content-paths "/*" --resource-group "$(azure.resourceGroup)" --no-wait
